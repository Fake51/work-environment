set cursorline
set number
set autoindent
set ignorecase
set foldmethod=marker
set incsearch
set hlsearch
set hidden
set ruler
set relativenumber
set backup
set writebackup
let mapleader = ","

syntax enable
set background=light
colorscheme solarized
let g:javascript_plugin_jsdoc = 1
set encoding=utf8

" set usable paths

set backupdir=~/.local/share/vim/backup
set directory=~/.local/share/vim/swap
set undodir=~/.local/share/vim/undo


" linters and various other commands to run on buffers
nnoremap <Leader>esl :call VimuxRunCommand("eslint " . bufname("%"))<CR>
nnoremap <Leader>npt :call VimuxRunCommand("npm test")<CR>
nnoremap <Leader>rp :call VimuxRunCommand("php " . bufname("%"))<CR>
nnoremap <Leader>pl :call VimuxRunCommand("php -l " . bufname("%"))<CR>
nnoremap <Leader>rn :call VimuxRunCommand("node " . bufname("%"))<CR>
nnoremap <Leader>cc :call VimuxRunCommand("g++ -Wall " . bufname("%"))<CR>

" various commands
nnoremap <TAB> :bn<CR>
nnoremap <S-TAB> :bp<CR>
nnoremap <Leader>w!! :w !sudo tee %<CR>
noremap <Leader>jt  <Esc>:%!python -m json.tool<CR>

" tabularize
nnoremap <Leader>t= :Tab /=<CR>
vnoremap <Leader>t= :Tab /=<CR>
nnoremap <Leader>t> :Tab /=><CR>
vnoremap <Leader>t> :Tab /=><CR>

" location buffer next and previous
nnoremap <Leader>cn :cn<CR>
nnoremap <Leader>cp :cp<CR>

vnoremap <Leader>c "+y<CR>
inoremap <Leader><Leader>v <ESC>"+pa

" various shortcuts
inoremap <C-U> <Esc>bveUea

" from https://code.google.com/p/lh-vim/source/browse/misc/trunk/macros/repl-visual-no-reg-overwrite.vim
"
"=============================================================================
" $Id$
" File:     repl-visual-no-reg-overwrite.vim                                           {{{1
" Author:   Luc Hermitte <EMAIL:hermitte {at} free {dot} fr>
"       <URL:http://code.google.com/p/lh-vim/>
" Version:  2.0
" Created:  14th Nov 2008
" Last Update:  $Date$
"------------------------------------------------------------------------
" Description:  
"       Provides a way to paste over the visual selection without overwriting
"       the default register.
"       NB: 
"       - A register can be specified to select what shall be pasted over
"         -> e.g.:  "ap  will paste @a over the selection
"       - &clipboard==unnamed & unnamedplus are taken into account
" 
"------------------------------------------------------------------------
" Installation: 
"       Either drop the file into {rtp}/macros/ and source it from your .vimrc,
"       or put it into {rtp}/plugin/
" History:  
"       v1.0: answers <URL:http://stackoverflow.com/questions/290465/vim-how-to-paste-over-without-overwriting-register>
"       v1.1: restricted to pure visual-mode (select-mode is not impacted)
"       v2.0: Take &clipboard into account.
" }}}1
"=============================================================================

let s:cpo_save=&cpo
set cpo&vim
"------------------------------------------------------------------------
" I haven't found how to hide this function (yet)
function! RestoreRegister()
  if &clipboard == 'unnamed'
    let @* = s:restore_reg
  elseif &clipboard == 'unnamedplus'
    let @+ = s:restore_reg
  else
    let @" = s:restore_reg
  endif
  return ''
endfunction

function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction

" This supports "rp that permits to replace the visual selection with the
" contents of @r
xnoremap <silent> <expr> p <sid>Repl()

"------------------------------------------------------------------------
let &cpo=s:cpo_save
"=============================================================================
" vim600: set fdm=marker:

" * searches for selected text forwards
" # searches for selected text backwards
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
